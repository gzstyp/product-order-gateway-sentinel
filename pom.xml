<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>product-order-gateway-sentinel</artifactId>
    <packaging>pom</packaging>
    <version>v1.0.0</version>
    <modules>
        <module>eureka-server01</module>
        <module>eureka-server02</module>
        <module>eureka-server03</module>
        <module>order-service</module>
        <module>product-service</module>
        <module>gateway-server</module>
        <module>gateway-server-sentinel</module>
    </modules>

    <description>
    	已添加gateway路由网关模块
        product-service,商品服务,供订单服务调用,相当于服务提供者;
        order-service,订单服务,它会内部调用商品服务;供web前端提供接口服务;
        gateway限流功能,采用的令牌桶限流,主要依赖redis+lua脚本来处理;
        整合Sentinel实现限流;
        整合sentinel仅仅是做限流,鉴权可以用spring cloud gateway 自带的全局过滤器或网关过滤器;
        AccessFilter开启后url或请求头没有token则访问不了,正式环境则要开启;
        不推荐使用模块gateway-server,因为不会用,搞不定!!!推荐使用 gateway-server-sentinel,上线后移除该模块,模块gateway-server可以参考
        (99%)2个9是基本可用;(99.9%)3个9是叫高可用;(99.99%)4个9是叫拥有自动恢复的高可用;
        主要手段:数据的冗余备份和服务的失效转移
        可以使用Nginx做网关集群,即部署多个 spring cloud gateway 网关实例,通过nginx反向代理，达到高可用
        参考视频:《第二代微服务网关组件 - Spring Cloud Gateway》
        分布式分为的同构和异构,本项目适用于同构
        在所有的集群eureka服务中某一时刻仅在某个节点显示已注册的服务
        https://www.jianshu.com/p/9a8d94c0c90c
        https://www.jianshu.com/p/f7b94599ffab
    </description>

    <properties>
        <spring-cloud-version>Hoxton.SR1</spring-cloud-version>
        <spring-cloud-alibaba-version>2.1.0.RELEASE</spring-cloud-alibaba-version>
        <java.version>1.8</java.version>
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.4.RELEASE</version>
    </parent>

    <!--依赖管理-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud-version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba-version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--日志开始-->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>1.7.26</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-core</artifactId>
                <version>1.2.3</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>1.2.3</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <!--打包配置,独立部署的都需要添加-->
    <build>
        <plugins>
            <!--1.spring boot应用打包jar-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <!-- 若是前后端分离或仅作接口可以不需指定版本号 1.4.2.RELEASE -->
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- 忽略无web.xml警告 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.2.2</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
            <!-- 打包jar时注释掉,资源文件拷贝插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <!--2.解决Maven项目默认的jdk版本-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <!--3.打包时跳过测试-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
        </plugins>
        <!--4.-->
        <resources>
            <resource>
                <directory>${basedir}/src/main/webapp</directory>
                <targetPath>META-INF/resources</targetPath>
                <includes>
                    <include>**/**</include>
                </includes>
            </resource>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <includes>
                    <include>**/**</include>
                </includes>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                    <include>**/*.properties</include>
                    <include>**/*.ftl</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>